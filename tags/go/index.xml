<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Bear&#39;s Lodge</title>
    <link>https://mi-bear.github.io/tags/go/</link>
    <description>Recent content in Go on Bear&#39;s Lodge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Nov 2017 13:05:41 +0900</lastBuildDate>
    
	<atom:link href="https://mi-bear.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Conference 2017 Autumn</title>
      <link>https://mi-bear.github.io/post/20171105/</link>
      <pubDate>Sun, 05 Nov 2017 13:05:41 +0900</pubDate>
      
      <guid>https://mi-bear.github.io/post/20171105/</guid>
      <description>昨日のVimConf2017に引き続き, 2017年秋のGoCon。
抽選に当ってとっても嬉しいʕ•ᴥ•ʔ
 Gopher君
A post shared by Michiru Shirakawa (@micchiebear) on Nov 4, 2017 at 9:07pm PDT
  抜け漏れも多々ありますが, 色々とメモをしています。もうちょっとあとの自分のため！
🐻 特別企画: パネルディスカッション mattnさんはじめ, 全4名のすごい人達の対談で, 大変濃かったです。
アップグレード案件で手こずったところは？  Goは動かしっぱなしでapt updateも問題なく。Windowsでも問題ない。 近々オンラインアップデートをする予定があるが, ほぼ不安はない。 Goのバージョンを上げたときは必ずソースから再Buildしないと新しいバージョンの恩恵が受けられない。  Goherになったきっかけ  8年くらい目にニュースで取り上げられたあとに触った。そのあとみんながクールダウンしたあとも使い続けていた。 Windowsでしっかり動いたから。Goまわりは Windowsハッカーが多い。 画像のサムネイルを非同期で変換するジョブワーカー mattnさんが使っていたから by kaoriya 周りで誰も使っている人がいなかったから。変態言語ということで喜んで。  WindowsでGo使っている人  会場で0.5%  Windowsで生で書いていることの面白さ  GoはUnix側に倒していない。 ファイルパスパッケージやOSパッケージは, Unixに合わせるためのパッケージということではない。 exeを作ってバイナリ配布することができること。配布のしやすさ。  WindowsだけではなくてLinuxにバイナリ配布することはあります？  このコードはWindowsでは動かないな, でしか動かないな, は頭に入っている。 Vimのコンパイルスイッチは非常にひどいが, Goはしっかり別れている。  今後あったらいいなという本  知見はどんどんブログや本で出していくといい。 自分も積極的にフィードバックしたい。 Goでやるといいもの, Goで機械学習, ネットワークプログラムのエッセンス等 アルゴリズム系をしっかり勉強できるものがあるといい。 ノウハウ, パターン集が欲しい, あまり表に出てきていないので。 最新情報はブログ 本は古くなってしまう。結局公式ドキュメントを見ることに。 Goの公式ドキュメントは充実している。  実際に使っているパッケージ  ロギングは標準で書いてる。 ファイルにログとして出力してローテート回す。 JSONで出力。 gorutineの数がどんどん増えていくとき(サーバ増やして)は, モニタリングしておくと良かった。  Go2やっていきについて期待しているところ  バグの互換性を引きずっているところがある。(1世代) バグが継承されているところがなくなるのであれば, それだけでもGo2は価値がある。 ジェネリクスがあるといいなあ。 実行バイナリのサイズ小さくならないかなあ。 使ってみて困った, といったようなレポートベースのIssueがあると嬉しい。 Goは安全に倒そうとしている。そのせいでちょっと遅くなっているところもある。コレがGo2で外せないかなと思っている。  Goを入門者にすすめるか  研究機関や学校でも教えたほうが良いと思う。 Vimの人としての危機感…Goはビジュアルプログラミング言語になり得るのでは。 tenntennさん, このあいだ高校生に教えた。  何か別の言語を学んでいる人前提で教えていたことしかなかったので, プログラミング入門者には難しかった。 向いているとは思うが, 具体的にどう教えるのが良いのか。  GoはPlaygroundがあるので最初に何かできているものから学ぶのが良いのでは。 このサンプルを作るからはじめるのにいいものって何だろう？  ちょうどいい具合にGoが学べて離れていかないもの。 Raspberry Pi でゲーム作ってみるとか？   Goの互換性を引きずっているバグは具体的になに？  OSのCreate, Windowsはフラグが1つ足りない。互換性が壊れるから直さないと言われてこのままクローズしそう。  mocが必要になるようなテストってどうするの？  reflectionで無理やりつくる。お手製のmocライブラリを書いている。 サードパーティーに頼りたくない派。 Readerを渡して処理するとか。最初からテストで使うことを想定して書いている。 assertが欲しい場合はtestifyを使っている。  Go本体を知るために勉強するには？  ドキュメントの修正からはじめていくのはどうでしょうか？ チャレンジ精神は大切。 勢いも大切。 議論も大切。  GoとRDBMSをやり取りするのに一番良いのは？  リフレクションが多くてGoぽくない, 今後どうなっていくの？ database/sqlがかなり安全に倒している。 Go2でドラスティックに変わっていくのでは。 mattnさんが使っているORMについてはgorp, gormにしようと思ってやめた。  気に入っているOSS  Goの本体, 標準ライブラリは好きで, これ読んでいるだけで新幹線行って帰って来れる。  次は過激な話もしたいとのこと。</description>
    </item>
    
    <item>
      <title>DevFest2017で喋ってみた</title>
      <link>https://mi-bear.github.io/post/20171010/</link>
      <pubDate>Tue, 10 Oct 2017 20:35:07 +0900</pubDate>
      
      <guid>https://mi-bear.github.io/post/20171010/</guid>
      <description>なんと今日は結構記念日！なので思う存分寿司を喰らいました。
 鉄板寿司
A post shared by Michiru Shirakawa (@micchiebear) on Oct 10, 2017 at 4:38am PDT
 
さらに本日は戦闘(銭湯)の日らしく, 銭湯に参戦しましたが, 2件ある近所の銭湯のうち1件は並びが出ていたので静かなほうに行きました。
突然話は変わります。
DevFest2017というGoogle関連Developersのイベントで, 初のセッションを担当しました。
きっかけは, わたしたちが所属しているWomenWhoGoTokyoというGo言語の女性があつまるコミュニティのJapanese版として仲間がもっと欲しいという気持ち, そして, 本当はそんなに女性限定とは思っていないんです。
自分自身としては, そんなにガチでなくていい, とにかく書きたい気持ちで情報共有したり, それどうやって学んだの〜？みたいな話をどんどんしていきたいし, もし初めての人がいるならば一緒にやっていきたいので最初でお手伝いできることがあれば何でもやりたいから！！ というものになります。
今回は一緒に働いていた仲間でもある@mom0tomoさんとコラボしました。
 わたしたちの魂のセッションです&amp;hellip;
作っているときはとてもとても楽しくて, また一緒にやりたいな。
ハードル気にせずにどんどんGoの世界にみんなに飛び込んで欲しくて, こういう内容になりました。
これからが楽しみ&amp;hellip;!!!
そして, 実は, 昨日からWomenWhoGoTokyoのスタッフにもなりました。
今までスタッフをやっていただいた皆さんに感謝をしつつ, これからぐいぐい頑張っていきますʕ•ᴥ•ʔ
今回お話を聞かせていただいたセッションも多数あります。
自分自身の好みの傾向もあり, Go縛りになってしまいましたが, Go2.0, 設計, クラウドへの想いが高まり, 今すぐにでも何かしないとという気持ちになっています。
初めてのDevFest, 素敵すぎました！
次も更に突っ込んだ話でセッションしたいなあ&amp;hellip;なんて思いつつも, ボランティアスタッフとして役に立てることをしていきたいという気持ちで溢れています。
運営スタッフの皆さん・スピーカーの皆さん・ご来場頂いた皆さん, みんなに感謝だ〜
 写真もらったฅʕ•ᴥ•ʔฅ
A post shared by Michiru Shirakawa (@micchiebear) on Oct 8, 2017 at 11:56pm PDT</description>
    </item>
    
    <item>
      <title>FizzBuzz#2</title>
      <link>https://mi-bear.github.io/post/20170908/</link>
      <pubDate>Fri, 08 Sep 2017 16:54:00 +0900</pubDate>
      
      <guid>https://mi-bear.github.io/post/20170908/</guid>
      <description>FizzBuzz2本目。
今日は久しぶりに神保町に遊びに来たついでにやってい〼
1から100までの数字を出力するプログラム  3の倍数のときは数字の代わりにFizzを出力 5の倍数のときはBuzzを出力 3と5両方の倍数の場合にはFizzBuzzを出力  2. 3の倍数と5の倍数の変数を利用する PHPの場合  Goの場合  Rubyの場合 (T.B.D)</description>
    </item>
    
    <item>
      <title>FizzBuzz#1</title>
      <link>https://mi-bear.github.io/post/20170907/</link>
      <pubDate>Thu, 07 Sep 2017 13:39:31 +0900</pubDate>
      
      <guid>https://mi-bear.github.io/post/20170907/</guid>
      <description>何か新しく言語をやってみるときはFizzBuzzで試すのがちょうど良い。
gist-itをお試ししてみたかったのもあり。
問題は一貫して下記の通り。
1から100までの数字を出力するプログラム  3の倍数のときは数字の代わりにFizzを出力 5の倍数のときはBuzzを出力 3と5両方の倍数の場合にはFizzBuzzを出力  1. 愚直に割り算を利用する PHPの場合  Goの場合  Rubyの場合 (T.B.D)
ちなみに、gist-itを利用するときはプロトコルを揃えることʕ•ᴥ•ʔ</description>
    </item>
    
    <item>
      <title>CA.go#2</title>
      <link>https://mi-bear.github.io/post/20170906/</link>
      <pubDate>Wed, 06 Sep 2017 19:31:14 +0900</pubDate>
      
      <guid>https://mi-bear.github.io/post/20170906/</guid>
      <description>本日はありがとうございましたฅʕ•ᴥ•ʔฅ
A post shared by Michiru Shirakawa (@micchiebear) on Sep 6, 2017 at 5:57am PDT
  勉強会に行くと元気が出てもっと頑張ろうと思えるので, 時間が許す限り足を運びます。あと, ここに書いてあるのは私のメモです。
本日はサイバーエージェントさんのgoイベント。前回の#1も行ったので2回目だ〜
やはりプロダクトに導入している人たちの話は大変ためになります。感謝しかないʕ•ᴥ•ʔ
golang.org/x/sync による効率的な非同期処理  堀 良太さん
明日から導入できるとのこと。ありがたいです。
サンプルがあるので利用イメージが付きやすい。golang.org/x/syncは1.9からsyncパッケージの仲間入りを果たしたようです。
 errgroupってライトな使い方をイメージしているのかしらん。
 ぐるぐる回すバッチ処理のときに空きがあったら○○したい, なんてときに便利なsemaphore。処理の負荷ごとに重み付けができる。
 singleflight, キャッシュが切れたときに大量にリクエストが飛ぶ問題を防げる。DoChanはchannelを返却してくれる。大きなファイルのやり取りが多い場合, リクエストをまとめられるのは嬉しい。
 可読性を高めることができる!複雑なチャネルはリファクタの大将になりがちである&amp;hellip;!!  Update to Go 1.9  寺田 貴俊さん
この間フラッと1.9にアップデートしてみたけれどもきちんと見ていないので助かります。コレだ!!
マイクロサービスへの対応について。
 アップデートしたらテストが失敗したところがある。 Monotonic Clocksが含まれたことによるTimeのequalがコケた。 1.9からはwall clack + Monotonic Clocksとなる。==演算子の比較はMonotonic Clocksを含んで比較する。 time.Time()型であってもMonotonic Clocksが含まれないケースがあるから必ずしもequalにならない&amp;hellip; time.Now().Truncate(0)でMonotonic Clocksを取り除いて対処した。 go test, go vetが簡略化。優しい世界。 GoDocをよく読むべし。 Test Helperが愛情たっぷり💖  トルテリリースまでの Go Tips 16  中川 武憲さん</description>
    </item>
    
  </channel>
</rss>